//to be fixed , gui problem

#include <QApplication>
#include <QWidget>
#include <QPushButton>
#include <QLabel>
#include <QLineEdit>
#include <QGridLayout>
#include <QTextBrowser>
#include <vector>
#include <iostream>
#include <string>
#include <ctime>

struct Item {
    std::string name;
    int quantity;

    Item(const std::string& itemName, int itemQuantity) : name(itemName), quantity(itemQuantity) {}
};

struct Node {
    Item item;
    Node* next;

    Node(const Item& newItem) : item(newItem), next(nullptr) {}
};

class GameInventory {
private:
    Node* head;
    int size;

public:
    GameInventory() : head(nullptr), size(0) {}

    ~GameInventory() {
        clearInventory();
    }

    void addToInventory(const Item& item) {
        Node* newNode = new Node(item);

        if (head == nullptr) {
            head = newNode;
        } else {
            Node* current = head;
            while (current->next != nullptr) {
                current = current->next;
            }
            current->next = newNode;
        }

        size++;
    }

    void removeFromInventory() {
        if (head == nullptr) {
            std::cout << "Inventory is empty." << std::endl;
            return;
        }

        Node* current = head;
        Node* previous = nullptr;

        while (current->next != nullptr) {
            previous = current;
            current = current->next;
        }

        std::cout << "Removing item: " << current->item.name << std::endl;

        delete current;
        current = nullptr;

        if (previous != nullptr) {
            previous->next = nullptr;
        } else {
            head = nullptr;
        }

        size--;
    }

    void displayInventory() {
        if (head == nullptr) {
            std::cout << "Inventory is empty." << std::endl;
            return;
        }

        Node* current = head;
        int count = 0;
        int row = 1;

        while (current != nullptr) {
            std::cout << current->item.name << " x" << current->item.quantity << "\t";

            count++;
            if (count == 4) {
                std::cout << std::endl;
                count = 0;
                row++;
            }

            current = current->next;
        }

        std::cout << std::endl;
    }

    void clearInventory() {
        Node* current = head;

        while (current != nullptr) {
            Node* next = current->next;
            delete current;
            current = next;
        }

        head = nullptr;
        size = 0;
    }

    int getSize() const {
        return size;
    }

    Node* getHead() const {
        return head;
    }
};

class Game {
private:
    GameInventory inventory;
    GameInventory combineGrid;

public:
    void start() {
        std::cout << "Welcome to the game!" << std::endl;
        std::cout << "You can 'walk', 'search', or 'exit'." << std::endl;

        while (true) {
            std::string action;
            std::cout << "> ";
            std::cin >> action;

            if (action == "walk") {
                std::cout << "Walking to the next location..." << std::endl;
            } else if (action == "search") {
                searchLocation();
            } else if (action == "exit") {
                std::cout << "Exiting the game. Goodbye!" << std::endl;
                break;
            } else {
                std::cout << "Invalid action. Try again." << std::endl;
            }
        }
    }

    void searchLocation() {
        std::cout << "Searching the location..." << std::endl;

        bool itemFound = (rand() % 2) == 0;

        if (itemFound) {
            std::cout << "You found an item!" << std::endl;
            std::cout << "What do you want to do with the item?" << std::endl;
            std::cout << "1. Pick item" << std::endl;
            std::cout << "2. Discard item" << std::endl;
            std::cout << "3. Ignore item" << std::endl;
            std::cout << "4. Display inventory" << std::endl;

            int choice;
            std::cout << "> ";
            std::cin >> choice;

            switch (choice) {
                case 1:
                    pickItem();
                    break;
                case 2:
                    discardItem();
                    break;
                case 3:
                    std::cout << "You ignore the item and continue searching." << std::endl;
                    break;
                case 4:
                    displayInventory();
                    break;
                default:
                    std::cout << "Invalid choice. Ignoring the item." << std::endl;
                    break;
            }
        } else {
            std::cout << "No item found. Keep searching!" << std::endl;
        }
    }

    void pickItem() {
        if (inventory.getSize() >= 36) {
            std::cout << "Inventory is full. Discard an item to pick a new one." << std::endl;
        } else {
            std::string itemName;
            int itemQuantity;

            std::cout << "Enter the name of the item: ";
            std::cin >> itemName;
            std::cout << "Enter the quantity of the item: ";
            std::cin >> itemQuantity;

            inventory.addToInventory(Item(itemName, itemQuantity));

            std::cout << "Item added to the inventory." << std::endl;
        }
    }

    void discardItem() {
        if (inventory.getSize() == 0) {
            std::cout << "Inventory is empty. Nothing to discard." << std::endl;
        } else {
            inventory.removeFromInventory();
        }
    }

    void displayInventory() {
        std::cout << "Inventory:" << std::endl;
        inventory.displayInventory();
        std::cout << "Combine Grid:" << std::endl;
        combineGrid.displayInventory();
    }
};

class GameGUI : public QWidget {
    Q_OBJECT

public:
    GameGUI(QWidget *parent = nullptr);

private slots:
    void pickItem();
    void updateInventoryDisplay();

private:
    QPushButton *pickButton;
    QLineEdit *itemNameInput;
    QLineEdit *itemQuantityInput;
    QGridLayout *inventoryLayout;
    QTextBrowser *outputText;
    std::vector<Item> inventory;
};

GameGUI::GameGUI(QWidget *parent)
    : QWidget(parent) {
    pickButton = new QPushButton("Pick Item", this);
    itemNameInput = new QLineEdit(this);
    itemQuantityInput = new QLineEdit(this);
    inventoryLayout = new QGridLayout;
    outputText = new QTextBrowser(this);

    connect(pickButton, SIGNAL(clicked()), this, SLOT(pickItem()));
    connect(itemNameInput, SIGNAL(returnPressed()), this, SLOT(pickItem()));
    connect(itemQuantityInput, SIGNAL(returnPressed()), this, SLOT(pickItem()));

    int row = 0;
    int col = 0;

    for (int i = 0; i < 36; ++i) {
        QPushButton *itemButton = new QPushButton("Empty", this);
        itemButton->setFixedSize(80, 80);
        itemButton->setEnabled(false);
        inventoryLayout->addWidget(itemButton, row, col);

        if (++col >= 6) {
            col = 0;
            ++row;
        }
    }

    QVBoxLayout *mainLayout = new QVBoxLayout;
    mainLayout->addWidget(pickButton);
    mainLayout->addWidget(itemNameInput);
    mainLayout->addWidget(itemQuantityInput);
    mainLayout->addLayout(inventoryLayout);
    mainLayout->addWidget(outputText);
    setLayout(mainLayout);
}

void GameGUI::pickItem() {
    QString itemName = itemNameInput->text();
    int itemQuantity = itemQuantityInput->text().toInt();

    inventory.push_back(Item(itemName.toStdString(), itemQuantity));
    updateInventoryDisplay();
}

void GameGUI::updateInventoryDisplay() {
    for (int i = 0; i < inventory.size() && i < 36; ++i) {
        QPushButton *itemButton = qobject_cast<QPushButton*>(inventoryLayout->itemAtPosition(i / 6, i % 6)->widget());
        itemButton->setText(QString::fromStdString(inventory[i].name + " x" + std::to_string(inventory[i].quantity)));
        itemButton->setEnabled(true);
    }
}

int main(int argc, char *argv[]) {
    QApplication app(argc, argv);

    Game game;
    game.start();

    GameGUI gameWindow;
    gameWindow.setWindowTitle("Game GUI");
    gameWindow.setGeometry(100, 100, 600, 400);
    gameWindow.show();

    return app.exec();
}

#include "main.moc"
